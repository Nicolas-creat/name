local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Baddies Script‚ù§Ô∏è",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
       LoadingTitle = "Example Hub",
   LoadingSubtitle = "by nicollas",
   Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "FirstScript!"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè°Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

local SecondTab = Window:CreateTab("üóÇÔ∏èScripts", nil) -- Title, Image
local SecondSection = SecondTab:CreateSection("Scripts")

local ThirdTab = Window:CreateTab("Local Players", nil) -- Title, Image
local ThirdSection = ThirdTab:CreateSection("Teleport to Players")

Rayfield:Notify({
   Title = "You executed the Test Script!",
   Content = "Enjoy!",
   Duration = 9.5,
   Image = nil,
})

local RunService = game:GetService("RunService")

local tpwalking = false
local tpWalkSpeed = 10

--TP Walk Toggle
local Toggle = MainTab:CreateToggle({
    Name = "TPwalk",
    CurrentValue = false,
    Flag = "TPWalkToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        tpwalking = Value
        if not Value then return end
        local hb = RunService.Heartbeat
        local chr = game.Players.LocalPlayer.Character
        local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
        while tpwalking and chr and hum and hum.Parent do
           local delta = hb:Wait()
           if hum.MoveDirection.Magnitude > 0 then
               chr:TranslateBy(hum.MoveDirection * delta * tpWalkSpeed)
           end
        end
    end,
 })

 --TP WalkSpeed Slider
 local Slider = MainTab:CreateSlider({
    Name = "TPwalk Speed",
    Range = {0, 300},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 10,
    Flag = "TPWalkSpeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        tpWalkSpeed = Value
    end,
 })

local InfiniteJumpToggle = MainTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "Infinite Jump", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local InfiniteJumpEnabled = Value
        if InfiniteJumpEnabled then
            connection = game:GetService("UserInputService").JumpRequest:Connect(function()
                if InfiniteJumpEnabled then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                end
            end)
        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end,
})

 local RunService = game:GetService("RunService")

local tpwalking = false
local tpWalkSpeed = 10

local hitbox = false
local hitboxSize = 10
local originalSizes = {}
local originalTransparencies = {}

-- Function to update hitbox size
local function updateHitboxSize()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            local chr = player.Character
            local rootPart = chr and chr:FindFirstChild("HumanoidRootPart")
            if rootPart then
                rootPart.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                rootPart.Transparency = 0.5
                rootPart.CanCollide = false
            end
        end
    end
end

-- Hitbox Toggle without Team Check
local HitboxToggle = MainTab:CreateToggle({
    Name = "Hitbox",
    CurrentValue = false,
    Flag = "HitboxToggle",
    Callback = function(Value)
        hitbox = Value
        if hitbox then
            for _, player in ipairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer then
                    local chr = player.Character
                    local rootPart = chr and chr:FindFirstChild("HumanoidRootPart")
                    if rootPart and not originalSizes[player] then
                        originalSizes[player] = rootPart.Size
                        originalTransparencies[player] = rootPart.Transparency
                    end
                end
            end
            updateHitboxSize()
        else
            for player, size in pairs(originalSizes) do
                local chr = player.Character
                local rootPart = chr and chr:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    rootPart.Size = size or Vector3.new(2, 2, 1)
                    rootPart.Transparency = originalTransparencies[player] or 0
                    originalSizes[player] = nil
                    originalTransparencies[player] = nil
                end
            end
        end
    end,
})

-- Update hitbox size in real-time
RunService.Heartbeat:Connect(function()
    if hitbox then
        updateHitboxSize()
    end
end)

-- Hitbox Size Slider
local HitboxSlider = MainTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {0, 300},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = 10,
    Flag = "HitboxSizeSlider",
    Callback = function(Value)
        hitboxSize = Value
        if hitbox then
            updateHitboxSize()
        end
    end,
})

 local Button = SecondTab:CreateButton({
    Name = "Baddies Target Gui)",
    Callback = function()
        getgenv().Version = "new" -- "new" or "old" 
loadstring(game:HttpGet("https://raw.githubusercontent.com/rrixh/uwuware/refs/heads/main/games/BADDIESüíÖüèΩv2-NEWui",true))();
    end,
 })

 -- Function to teleport to a player
local function teleportToPlayer(player)
    local localPlayer = game.Players.LocalPlayer
    local chr = localPlayer.Character
    local rootPart = chr and chr:FindFirstChild("HumanoidRootPart")
    local targetChr = player.Character
    local targetRootPart = targetChr and targetChr:FindFirstChild("HumanoidRootPart")
    if rootPart and targetRootPart then
        rootPart.CFrame = targetRootPart.CFrame
    end
end

-- Table to store player buttons
local playerButtons = {}

-- Function to create a button for a player
local function createPlayerButton(player)
    playerButtons[player] = ThirdTab:CreateButton({
        Name = "Teleport to " .. player.Name,
        Callback = function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                teleportToPlayer(player)
            else
                print("Player's character or HumanoidRootPart not found.")
            end
        end,
    })
end

-- Create buttons for each player
for _, player in ipairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        createPlayerButton(player)
    end
end

-- Update buttons when players join or leave
game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        createPlayerButton(player)
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    if playerButtons[player] then
        if playerButtons[player].Remove then
            playerButtons[player]:Remove()
        elseif playerButtons[player].Destroy then
            playerButtons[player]:Destroy()
        end
        playerButtons[player] = nil
    end
end)
-- Function to check and remove invalid player buttons
local function checkAndRemoveInvalidButtons()
    for player, button in pairs(playerButtons) do
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            if button.Remove then
                button:Remove()
            elseif button.Destroy then
                button:Destroy()
            end
            playerButtons[player] = nil
        end
    end
end

-- Periodically check and remove invalid player buttons
RunService.Heartbeat:Connect(function()
    checkAndRemoveInvalidButtons()
end)
